Fuzz Testing

1)	Суть метода
Fuzz Testing, по версии википедии - это, автоматическая или полуавтоматическая, техника тестирования программного обеспечения, предполагающая предоставление программному продукту недействительных, чаще случайных, данных с целью проверки устойчивости программы. Такое тестирование позволяет понять какие некорректные данные, не идентифицируются как некорректные и попадают в программу на обработку, что строго говоря нежелательно.
Пример для понимания был выбран довольно простой. Представьте что вы владелец мощного вычислительного кластера, или что то подобное. Ваши пользователи - знаменитые учёные, отправляющие свои данные, в формате XML, на обработку кластеру, в простом текстовом файле. И перед вами стоит задача не допустить файлы которые могут нарушить работу кластера или даже передать управление третьим лицам. Для решения данной проблемы вы ставите прослойкой, между пользователем и кластером, небольшое программное обеспечение, которое по некоему регулярному выражению определяет безопасность полученного файла. Но вот незадача, как проверить полученное программное обеспечение, нельзя же просто сидеть и в блокноте писать файлы для проверки, на это и жизни не хватит. Здесь на помощь и приходят различные программы реализующие Fuzz Testing. 
Подавляющее большинство программ такого рода производит мутирование(частичное изменение) исходного шаблона данных в заданных пределах, с учетом специфики исследуемой программы.

2)	Решаемые задачи 
Как ни странно, но данный метод тестирования в большей степени подходит для тестированию по типу серого ящика. Даже частичное знание того как функционирует программа будет достаточно для того, чтобы ускорить процесс тестирования.
Во первых, нам известно в какую сторону, стоит производить мутацию данных, а в какую нет, так как наша программа уже покрывает её исключениями и разного рода проверками.
Во вторых, генерация данных происходит случайным образом, а значит среди сгенерированных данных вполне могут оказаться корректные. Мы всегда можем удостовериться, правильно ли обрабатываются корректные данные, заглянув в код. И исключив, по возможности, корректные данные, незначительно, но всё же сократим время тестирования.

3)	Не решаемые задачи
Fuzz Testing как можно догадаться абсолютно не подходит для тестированию по типу белого ящика, но с чёрным всё гораздо интереснее.
Казалось бы, чёрный ящик - метод тестирования путём вариации входных данных и просмотра реакции на них, Fuzz Testing - практически, вариатор входных данных. Но в реальности, чёрный ящик катастрофически проигрывает в производительности серому ящику. И всё логично, не имея доступа к логике программы, необходимо проверять огромное количество случайно генерируемых данных, без возможности сокращения их количества.
Как итог стоит также упомянуть, что Fuzz Testing лишь проверяет устойчивость программы, на поступление некорректных входных данных, но ни в коем случае не проверяет правильность обработки верных.
